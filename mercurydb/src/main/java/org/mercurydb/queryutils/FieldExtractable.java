package org.mercurydb.queryutils;

import java.util.Map;
import java.util.Set;

/**
 * This class defines two accessors for data
 * in a JoinStream. Note that JoinStream implements
 * JoinField. It provides a way for JoinStreams to
 * ask other JoinStreams how to extract a join key given
 * an instance of their class owner.
 *
 */
public interface FieldExtractable {
    /**
     * <p>
     * Returns the name of the class owner. Note
     * that the parameter to extractJoinKey should
     * always be of this type. Ex. For a JoinStream
     * from ATable, this should return A.class
     * </p>
     * // TODO extractJoinKey from which type?
     *
     * @return a Class
     */
    public Class<?> getContainerClass(); // TODO why return Class<?> instead of Class<T>

    /**
     * Extracts a join key value from an instance of the
     * type returned by getClassOwner()
     *
     * @param o // TODO documentation -- because I definitely can't tell what goes here
     * @return The value of the field to be extracted. // TODO is this correct?
     */
    public Object extractField(Object o);

    /**
     * @return true if field is indexed, false otherwise
     */
    public boolean isIndexed();

    /**
     * @return map associated with index this field, or null if no index is present
     */
    public Map<Object, Set<Object>> getIndex();

    /**
     * Returns a default stream of the type that contains the field we
     * are extracting.
     *
     * @return default stream
     */
    //public HgStream getDefaultStream();

    /**
     * Returns the id generated by the HgDB bootstrap process. This
     * is the JOIN_ID in the tables. JOIN_ID should be packaged into
     * produced FieldExtractable instances in this way.
     *
     * @return id generated by the HgDB bootstrap process.
     */
    public int getContainerId();
}
