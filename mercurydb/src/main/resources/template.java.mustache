package {{packageName}};

import org.mercurydb.queryutils.*;
import java.util.*;

import com.google.common.collect.MapMaker;

import {{fullSourceClass}};

public class {{sourceClass}}{{tableSuffix}} {
	public static final int JOIN_ID = {{joinId}};
	
    public static final List<{{sourceClass}}> table = new ArrayList<>();
    
    public static final Class<{{sourceClass}}> containedClass = {{sourceClass}}.class;

    // Maps for indexed fields
    {{#fields}}
    {{#hasIndex}}
    private static Map<{{type}}, Set<{{sourceClass}}>> {{name}}Index = new HashMap<>();

    {{/hasIndex}}
    {{/fields}}
    public static void insert({{sourceClass}} val) {
        {{#fields}}
        {{#hasIndex}}
        // Populate {{name}} index
        Set<{{sourceClass}}> {{name}}Set = {{name}}Index.get(val.{{name}});
        if ({{name}}Set == null) {
            {{name}}Set = new HashSet<{{sourceClass}}>();//Collections.newSetFromMap(new WeakHashMap<{{sourceClass}}, Boolean>());;
        }
        {{name}}Set.add(val);
        {{name}}Index.put(val.{{name}}, {{name}}Set);
        {{/hasIndex}}
        {{/fields}}
        // Populate standard table if T(val) == {{sourceClass}}
        if ({{sourceClass}}.class.equals(val.getClass()))
            table.add(val);
        {{#hasSuper}}
        // Populate super table indices
        {{cSuper}}{{tableSuffix}}.insert(val);
        {{/hasSuper}}
    }
    
    public static void remove({{sourceClass}} val) {
    	// Remove from table
    	if ({{sourceClass}}.class.equals(val.getClass()))
    	    table.remove(val);
    	{{#fields}}
    	{{#hasIndex}}
    	// Remove from {{name}} index
    	{{name}}Index.values().removeAll(Collections.singleton(val));
    	{{/hasIndex}}
    	{{/fields}}
    	{{#hasSuper}}
    	// Remove from {{cSuper}} indices (superclass)
    	{{cSuper}}{{tableSuffix}}.remove(val);
    	{{/hasSuper}}
    	// Remove from subclass indices
    	{{#subClasses}}
    	if ({{toString}}{{tableSuffix}}.containedClass.isInstance(val)) {
    	    {{toString}}{{tableSuffix}}.remove({{toString}}{{tableSuffix}}.containedClass.cast(val));
    	    return;
    	}
    	{{/subClasses}}
    }

    // Set methods - make sure you use these on indexed fields for consistency!
    {{#fields}}
    {{^isFinal}}
    public static void set{{CCname}}({{sourceClass}} instance, {{_type}} val) {
        {{#hasIndex}}
        {{name}}Index.get(instance.{{name}}).remove(instance);
        instance.{{name}} = val;
        Set<{{sourceClass}}> {{name}}Set = {{name}}Index.get(instance.{{name}});
        if ({{name}}Set == null) {
            {{name}}Set = new HashSet<{{sourceClass}}>();//Collections.newSetFromMap(new WeakHashMap<{{sourceClass}}, Boolean>());;
            {{name}}Index.put(instance.{{name}}, {{name}}Set);
        }
        {{name}}Set.add(instance);
        {{/hasIndex}}
        {{^hasIndex}}
        instance.{{name}} = val;
        {{/hasIndex}}
    }

    {{/isFinal}}
    {{/fields}}

    // Get methods -- these are retrievals for attribute = value queries
    {{#fields}}
    public static HgStream<{{sourceClass}}> query{{CCname}}({{_type}} val) {
        {{#hasIndex}}
        Set<{{sourceClass}}> result = {{name}}Index.get(val);
        return result == null
                ? new Retrieval<{{sourceClass}}>(Collections.EMPTY_LIST, 0)
                : new Retrieval<{{sourceClass}}>(result, result.size()); 
        {{/hasIndex}}
        {{^hasIndex}}
        return scan().filter(on.{{name}},val);
        {{/hasIndex}}
    }

    {{/fields}}
    {{#queries}}
    public static HgStream<{{sourceClass}}>
    query{{#qFields}}{{CCname}}{{/qFields}}({{prototype}}) {
        Iterable<{{sourceClass}}> seed = table;
        int size = table.size();
        {{#hasIndex}}
        Set<{{sourceClass}}> l;
        Object usedIndex = null;

        {{/hasIndex}}
        {{#qFields}}
        {{#hasIndex}}
        // Check {{name}} index
        l = {{name}}Index.get({{name}});
        if (l != null && l.size() <= size) {
            size = l.size();
            seed = l;
            usedIndex = {{name}};
        }
        {{/hasIndex}}
        {{/qFields}}

        HgStream<{{sourceClass}}> result = new Retrieval<{{sourceClass}}>(seed, size);

        {{#qFields}}
        // Filter {{name}}
        {{#hasIndex}}
        if ({{name}} != usedIndex)
            result = result.filter(on.{{name}},{{name}});
        {{/hasIndex}}
        {{^hasIndex}}
        result = result.filter(on.{{name}},{{name}});
        {{/hasIndex}}

        {{/qFields}}
        return result;
    }

    {{/queries}}

    public static final class on {
	    {{#fields}}
	    public static final FieldExtractable<{{type}}> {{name}} = new FieldExtractable() {
            @Override
            public {{type}} extractField(Object instance) {
                return (({{sourceClass}})instance).{{name}};
            }

            @Override
            public Class<?> getContainerClass() {
                return {{sourceClass}}.class;
            }

            @Override
            public boolean isIndexed() {
                {{#hasIndex}}
                return true;
                {{/hasIndex}}
                {{^hasIndex}}
                return false;
                {{/hasIndex}}
            }
            
            @Override
            public int getContainerId() {
            	return JOIN_ID;
            }
        };

    	{{/fields}}
    }

    public static FieldExtractable itself() {
        return new FieldExtractable() {
            @Override
            public Object extractField(Object instance) {
                return instance;
            }

            @Override
            public Class<?> getContainerClass() {
                return {{sourceClass}}.class;
            }

            @Override
            public boolean isIndexed() {
                return false;
            }
            
            @Override
            public int getContainerId() {
                return JOIN_ID;
            }
        };
    }

    public static HgMonoStream<{{sourceClass}}> joinOn(FieldExtractable jf) {
        return scan().joinOn(jf);
    }

    {{#fields}}
    public static HgMonoStream<{{sourceClass}}> joinOn{{CCname}}() {
        {{#hasIndex}}
        return new IndexRetrieval<{{sourceClass}}>({{name}}Index).joinOn(on.{{name}}); 
        {{/hasIndex}}
        {{^hasIndex}}
        return scan().joinOn(on.{{name}});
        {{/hasIndex}}
    }
    {{/fields}}

    public static HgMonoStream<{{sourceClass}}> joinOnItself() {
        return scan().joinOn(itself());
    }

    public static Retrieval<{{sourceClass}}> scan() {
        /*
         * Here we need to do a tree traversal such that
         * every possible subclass table is joined with
         * this classes table in the scan
         */
         
        Retrieval<{{sourceClass}}> result = new Retrieval<{{sourceClass}}>(table, table.size());
        {{#subClasses}}
        result = result.join({{toString}}{{tableSuffix}}.scan());
        {{/subClasses}}
        return result;
    }
}
