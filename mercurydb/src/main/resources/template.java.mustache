package {{packageName}};

import org.mercurydb.queryutils.*;
import java.util.*;

import {{fullSourceClass}};

@SuppressWarnings("unused")
public class {{sourceClass}}{{tableSuffix}} {
    public static final TableID<{{sourceClass}}> ID = TableID.createName();

    /**
     * Create a temporary alias for this table, for joins.
     */
    public static TableID<{{sourceClass}}> createAlias() {
        return TableID.<{{sourceClass}}>createAlias();
    }

    public static final List<{{sourceClass}}> table = new ArrayList<>();

    public static final Class<{{sourceClass}}> containedClass = {{sourceClass}}.class;

    // Maps for indexed fields
    {{#values}}
    {{#hasIndex}}
    {{#isOrdered}}
    private static Map<{{{type}}}, Set<{{sourceClass}}>> {{name}}Index = new TreeMap<>();
    {{/isOrdered}}
    {{^isOrdered}}
    private static Map<{{{type}}}, Set<{{sourceClass}}>> {{name}}Index = new HashMap<>();
    {{/isOrdered}}

    {{/hasIndex}}
    {{/values}}
    public static void insert({{sourceClass}} val) {
        {{#values}}
        {{#hasIndex}}
        // Populate {{name}} index
        Set<{{sourceClass}}> {{name}}Set = {{name}}Index.get(val.{{hgValueMethod}});
        if ({{name}}Set == null) {
            {{name}}Set = new HashSet<>();//Collections.newSetFromMap(new WeakHashMap<{{sourceClass}}, Boolean>());
        }
        {{name}}Set.add(val);
        {{name}}Index.put(val.{{hgValueMethod}}, {{name}}Set);
        {{/hasIndex}}
        {{/values}}
        // Populate standard table if T(val) == {{sourceClass}}
        if ({{sourceClass}}.class.equals(val.getClass())) {
            table.add(val);
        }
        {{#hasSuper}}
        // Populate super table indices
        {{cSuper}}{{tableSuffix}}.insert(val);
        {{/hasSuper}}
    }

    public static void remove({{sourceClass}} val) {
        // Remove from table
        if ({{sourceClass}}.class.equals(val.getClass())) {
            table.remove(val);
        }
        {{#values}}
        {{#hasIndex}}
        // Remove from {{name}} index
        {{name}}Index.get(val.{{hgValueMethod}}).remove(val);
        {{/hasIndex}}
        {{/values}}
        {{#hasSuper}}
        // Remove from {{cSuper}} indices (superclass)
        {{cSuper}}{{tableSuffix}}.remove(val);
        {{/hasSuper}}
        // Remove from subclass indices
        {{#subClasses}}
        if ({{toString}}{{tableSuffix}}.containedClass.isInstance(val)) {
            {{toString}}{{tableSuffix}}.remove({{toString}}{{tableSuffix}}.containedClass.cast(val));
            return;
        }
        {{/subClasses}}
    }

    // Set methods - make sure you use these on indexed fields for consistency!
    {{#values}}
    public static void removeStaleValue{{CCname}}({{sourceClass}} instance) {
        {{#hasIndex}}
        Set<{{sourceClass}}> value = {{name}}Index.get(instance.{{hgValueMethod}});
        if (value != null) {
            value.remove(instance);
        }
        {{/hasIndex}}
    }
    
    public static void updateNewValue{{CCname}}({{sourceClass}} instance) {
        {{#hasIndex}}
        {{{rawType}}} key = instance.{{hgValueMethod}};
        Set<{{sourceClass}}> values = {{name}}Index.get(key);
        if (values == null) {
            values = new HashSet<>();
        }
        values.add(instance);
        {{name}}Index.put(key, values);
        {{/hasIndex}}
    }

    {{/values}}
    

    public static final class field {
        {{#values}}
        public static FieldExtractableSeed<{{sourceClass}}> {{name}}(TableID<{{sourceClass}}> id) {
            return new FieldExtractableSeed<{{sourceClass}}>(id) {
                @Override
                public Object extractField(Object instance) {
                    return (({{sourceClass}})instance).{{hgValueMethod}};
                }

                @Override
                public Class<?> getContainerClass() {
                    return {{sourceClass}}.class;
                }

                @Override
                public boolean isIndexed() {
                    {{#hasIndex}}
                    return true;
                    {{/hasIndex}}
                    {{^hasIndex}}
                    return false;
                    {{/hasIndex}}
                }

                @Override
                @SuppressWarnings("unchecked") // casting with (Map)
                public Map<Object, Set<Object>> getIndex() {
                    {{#hasIndex}}
                    return (Map) {{name}}Index;
                    {{/hasIndex}}
                    {{^hasIndex}}
                    return null;
                    {{/hasIndex}}
                }

                @Override
                public HgStream<{{sourceClass}}> getDefaultStream() {
                    return stream();
                }
            };
        }

        {{/values}}
    }

    public static FieldExtractableSeed<{{sourceClass}}> self(TableID<{{sourceClass}}> id) {
        return new FieldExtractableSeed<{{sourceClass}}>(id) {
            @Override
            public Object extractField(Object instance) {
                return instance;
            }

            @Override
            public Class<?> getContainerClass() {
                return {{sourceClass}}.class;
            }

            @Override
            public boolean isIndexed() {
                return false;
            }

            @Override
            public Map<Object, Set<Object>> getIndex() {
                return null;
            }

            @Override
            public HgStream<{{sourceClass}}> getDefaultStream() {
                return stream();
            }
        };
    }

    public static final JoinField on = new JoinField(ID);

    public static JoinAsField as(TableID<{{sourceClass}}> id) {
        return new JoinAsField(id);
    }

    public static class JoinAsField {
        public final JoinField on;

        public JoinAsField(TableID<{{sourceClass}}> aliasId) {
            this.on = new JoinField(aliasId);
        }
    }

    public static class JoinField {
        private final TableID<{{sourceClass}}> id;

        public JoinField(TableID<{{sourceClass}}> aliasId) {
            this.id = aliasId;
        }

        {{#values}}
        public HgTupleStream {{name}}() {
            return stream().joinOn(field.{{name}}(id));
        }
        {{/values}}
    }

    public static class eq {
        {{#values}}
        public static FieldExtractableRelation<{{sourceClass}}, {{{type}}}>
        {{name}}({{{type}}} val) {
            return new FieldExtractableRelation<>(field.{{name}}(ID), HgRelation.EQ, val);
        }
        {{/values}}
    }

    public static class ne {
        {{#values}}
        public static FieldExtractableRelation<{{sourceClass}}, {{{type}}}>
        {{name}}({{{type}}} val) {
            return new FieldExtractableRelation<>(field.{{name}}(ID), HgRelation.NE, val);
        }
        {{/values}}
    }

    public static class lt {
        {{#values}}
        public static FieldExtractableRelation<{{sourceClass}}, {{{type}}}>
        {{name}}({{{type}}} val) {
            return new FieldExtractableRelation<>(field.{{name}}(ID), HgRelation.LT, val);
        }
        {{/values}}
    }

    public static class le {
        {{#values}}
        public static FieldExtractableRelation<{{sourceClass}}, {{{type}}}>
        {{name}}({{{type}}} val) {
            return new FieldExtractableRelation<>(field.{{name}}(ID), HgRelation.LE, val);
        }
        {{/values}}
    }

    public static class gt {
        {{#values}}
        public static FieldExtractableRelation<{{sourceClass}}, {{{type}}}>
        {{name}}({{{type}}} val) {
            return new FieldExtractableRelation<>(field.{{name}}(ID), HgRelation.GT, val);
        }
        {{/values}}
    }

    public static class ge {
        {{#values}}
        public static FieldExtractableRelation<{{sourceClass}}, {{{type}}}>
        {{name}}({{{type}}} val) {
            return new FieldExtractableRelation<>(field.{{name}}(ID), HgRelation.GE, val);
        }
        {{/values}}
    }

    public static class in {
        {{#values}}
        public static FieldExtractableRelation<{{sourceClass}}, {{{type}}}>
        {{name}}({{{type}}} val) {
            return new FieldExtractableRelation<>(field.{{name}}(ID), HgRelation.IN, val);
        }
        {{/values}}
    }

    public static FieldExtractablePredicate<{{sourceClass}}, {{sourceClass}}>
    predicate (HgPredicate<{{sourceClass}}> predicate) {
        return new FieldExtractablePredicate<>(self(ID), predicate);
    }

    public static class predicates {
        {{#values}}
        public static FieldExtractablePredicate<{{sourceClass}}, {{{type}}}>
        {{name}}(HgPredicate<{{{type}}}> predicate) {
            return new FieldExtractablePredicate<>(field.{{name}}(ID), predicate);
        }
        {{/values}}
    }

    public static HgWrappedIterableStream<{{sourceClass}}> stream() {
        /*
         * Here we need to do a tree traversal such that
         * every possible subclass table is joined with
         * this classes table in the stream
         */

        HgWrappedIterableStream<{{sourceClass}}> result = new HgRetrievalStream<>(table);
        {{#subClasses}}
        result = result.concat({{toString}}{{tableSuffix}}.stream());
        {{/subClasses}}
        return result;
    }
}
